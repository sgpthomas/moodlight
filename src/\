module PanelSet = Set.Make(Panel);

type state = {
  pixelCount: int,
  pixelSize: Pixel.size,
  clockSpeed: int,
  time: int,
  timerId: ref(option(Js.Global.intervalId)),
  panels: PanelSet.t,
  running: bool,
};

type action =
  | Tick
  | SetRunning(bool)
  | ResetTime
  | UpdateCount(int)
  | UpdateSize(int, int)
  | UpdateClockSpeed(int)
  | NewPanel
  | ResetPanels
  | UpdatePanel(Panel.t)
  | DeletePanel(Panel.t);

let component = ReasonReact.reducerComponent("Root");

let floatify = f => Js.Float.fromString(Js.Float.toString(f));

let pi = Js.Math._PI;
let unwrapPanel = (panel: Panel.t) =>
  if (panel.visible) {
    switch (panel.f) {
    | Cos(amp, period, phase, offset, timeDir) => (
        (i, t) => {
          let v =
            amp
            *. cos(
                 2.
                 *. pi
                 *. period
                 *. (
                   float_of_int(i)
                   +. float_of_int(t)
                   *. (-. timeDir)
                   +. floatify(phase)
                 ),
               )
            +. floatify(offset);

          let (r, g, b) = panel.color;
          (r *. v, g *. v, b *. v);
        }
      )
    | Line(slope, offset) => (
        (i, _t) => {
          let y =
            slope *. (1. /. 300.) *. float_of_int(i) +. floatify(offset);
          let (r, g, b) = panel.color;
          (r *. y, g *. y, b *. y);
        }
      )
    | Custom(_name, _funs) => ((_i, _t) => (0., 0., 0.))
    | Nothing => ((_i, _t) => (0., 0., 0.))
    };
  } else {
    (_i, _t) => (0., 0., 0.);
  };

let attachNewTimer = (state, send) =>
  switch (state.timerId^) {
  | Some(_) => ()
  | None =>
    if (state.clockSpeed > 0) {
      let timerId =
        Js.Global.setInterval(() => send(Tick), state.clockSpeed);
      send(SetRunning(true));
      state.timerId := Some(timerId);
    } else {
      state.timerId := None;
    }
  };

let removeTimer = (state, send) =>
  switch (state.timerId^) {
  | Some(id) =>
    Js.Global.clearInterval(id);
    send(SetRunning(false));
    state.timerId := None;
  | None => ()
  };

let default = {
  pixelCount: 387,
  pixelSize: {
    x: 3,
    y: 97,
  },
  clockSpeed: 50,
  time: 0,
  timerId: ref(None),
  panels: PanelSet.empty,
  running: false,
};

let panelId = ref(-1);
let defaultPanel = () : Panel.t => {
  panelId := panelId^ + 1;
  {
    id: panelId^,
    name: "default",
    f: Panel.Nothing,
    visible: true,
    color: (0., 0., 0.),
  };
};

let defaultCos = Panel.Cos(0.5, 0.01, 0., 0.5, 0.);
let defaultLine = Panel.Line(1., 0.0);

let make = _children => {
  ...component,
  initialState: () => default,
  reducer: (action, state: state) =>
    switch (action) {
    | Tick => ReasonReact.Update({...state, time: state.time + 1})
    | SetRunning(r) => ReasonReact.Update({...state, running: r})
    | ResetTime => ReasonReact.Update({...state, time: 0})
    | UpdateCount(i) => ReasonReact.Update({...state, pixelCount: i})
    | UpdateSize(x, y) => ReasonReact.Update({
                             ...state,
                             pixelSize: {
                               x,
                               y,
                             },
                           })
    | UpdateClockSpeed(i) => ReasonReact.Update({...state, clockSpeed: i})
    | NewPanel =>
      ReasonReact.Update({
        ...state,
        panels: PanelSet.add(defaultPanel(), state.panels),
      })
    | ResetPanels => ReasonReact.Update({...state, panels: PanelSet.empty})
    | UpdatePanel(p) =>
      ReasonReact.Update({
        ...state,
        panels: PanelSet.add(p, PanelSet.remove(p, state.panels)),
      })
    | DeletePanel(p) =>
      ReasonReact.Update({
        ...state,
        panels: PanelSet.remove(p, state.panels),
      })
    },
  render: self =>
    <div id="root">
      <div className="row">
        <div className="col">
          <h3> (ReasonReact.string("Strip Controls")) </h3>
          <Slider
            min=1
            max=50.
            step=1.
            default=(float_of_int(default.pixelSize.x))
            title="X"
            onChange=(
              v =>
                self.send(
                  UpdateSize(int_of_float(v), self.state.pixelSize.y),
                )
            )
          />
          <Slider
            min=1
            max=500.
            step=1.
            default=(float_of_int(default.pixelSize.y))
            title="Y"
            onChange=(
              v =>
                self.send(
                  UpdateSize(self.state.pixelSize.x, int_of_float(v)),
                )
            )
          />
          <Slider
            min=1
            max=500.
            step=1.
            default=(float_of_int(default.pixelCount))
            title="Count"
            onChange=(v => self.send(UpdateCount(int_of_float(v))))
          />
          <Slider
            min=1
            max=200.
            step=1.
            default=(float_of_int(default.clockSpeed))
            title="Speed"
            onChange=(v => self.send(UpdateClockSpeed(int_of_float(v))))
          />
          <h4>
            (ReasonReact.string("Time: " ++ string_of_int(self.state.time)))
          </h4>
          <div>
            <button
              onMouseDown=(_evt => attachNewTimer(self.state, self.send))
              onMouseUp=(_evt => removeTimer(self.state, self.send))>
              (ReasonReact.string("Tick!"))
            </button>
            <ToggleButton
              labels=("Start", "Stop")
              state=self.state.running
              onToggle=(
                b =>
                  if (b) {
                    attachNewTimer(self.state, self.send);
                  } else {
                    removeTimer(self.state, self.send);
                  }
              )
            />
            <button onClick=(_evt => self.send(ResetTime))>
              (ReasonReact.string("Reset"))
            </button>
          </div>
        </div>
      </div>
      <Graph num=self.state.pixelCount size=self.state.pixelSize />
      <LedStrip
        num=self.state.pixelCount
        size=self.state.pixelSize
        time=self.state.time
        funs=(List.map(unwrapPanel, PanelSet.elements(self.state.panels)))
      />
      <div className="col">
        <button onClick=(_evt => self.send(NewPanel))>
          (ReasonReact.string("New Panel"))
        </button>
        <button onClick=(_evt => self.send(ResetPanels))>
          (ReasonReact.string("Delete All Panels"))
        </button>
      </div>
      <div className="row">
        (
          PanelSet.elements(self.state.panels)
          |> List.map((panel: Panel.t) =>
               <div
                 className=(
                             if (panel.visible) {
                               "col panel";
                             } else {
                               "col panel hidden";
                             }
                           )>
                 <span> (ReasonReact.string(string_of_int(panel.id))) </span>
                 <span>
                   <Dropdown
                     options=["nothing", "cos", "line"]
                     onChange=(
                                fun
                                | "nothing" =>
                                  self.send(
                                    UpdatePanel({
                                      ...panel,
                                      Panel.f: Panel.Nothing,
                                    }),
                                  )
                                | "cos" =>
                                  self.send(
                                    UpdatePanel({
                                      ...panel,
                                      Panel.f: defaultCos,
                                    }),
                                  )
                                | "line" =>
                                  self.send(
                                    UpdatePanel({
                                      ...panel,
                                      Panel.f: defaultLine,
                                    }),
                                  )
                                | _ => ()
                              )
                   />
                 </span>
                 <span>
                   (
                     switch (panel.f) {
                     | Panel.Nothing => ReasonReact.string("Nothing")
                     | Cos(amp, period, phase, offset, timeDir) =>
                       <Cosine
                         amp
                         period
                         phase
                         offset
                         timeDir
                         onUpdate=(
                           (amp, period, phase, offset, timeDir) =>
                             self.send(
                               UpdatePanel({
                                 ...panel,
                                 Panel.f:
                                   Cos(amp, period, phase, offset, timeDir),
                               }),
                             )
                         )
                       />
                     | Line(slope, offset) =>
                       <Line
                         slope
                         offset
                         onUpdate=(
                           (slope, offset) =>
                             self.send(
                               UpdatePanel({
                                 ...panel,
                                 Panel.f: Line(slope, offset),
                               }),
                             )
                         )
                       />
                     | Custom(s, _) => ReasonReact.string("[nyi] " ++ s)
                     }
                   )
                 </span>
                 <span>
                   {
                     let (red, green, blue) = panel.color;
                     <RGBSlider
                       red
                       green
                       blue
                       onUpdate=(
                         (r, g, b) =>
                           self.send(
                             UpdatePanel({...panel, Panel.color: (r, g, b)}),
                           )
                       )
                     />;
                   }
                 </span>
                 <span className="col">
                   <div>
                     <ToggleButton
                       labels=("Show", "Hide")
                       state=panel.visible
                       onToggle=(
                         b => self.send(UpdatePanel({...panel, visible: b}))
                       )
                     />
                   </div>
                   <div>
                     <button onClick=(_evt => self.send(DeletePanel(panel)))>
                       (ReasonReact.string("Delete"))
                     </button>
                   </div>
                 </span>
               </div>
             )
          |> Array.of_list
          |> ReasonReact.array
        )
      </div>
    </div>,
};
