// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Cosine = require("./Cosine.js");
var Slider = require("./Slider.js");
var LedStrip = require("./LedStrip.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ToggleButton = require("./ToggleButton.js");

var component = ReasonReact.reducerComponent("Root");

function floatify(f) {
  return Number(f.toString());
}

var pi = Math.PI;

function unwrap_colorFunction(param) {
  var colorF = param[0];
  if (param[1]) {
    var timeDir = colorF[4];
    var offset = colorF[3];
    var phase = colorF[2];
    var period = colorF[1];
    var amp = colorF[0];
    return (function (i, t) {
        return amp * Math.cos(2 * pi * period * ((i + Caml_int32.imul(t, -timeDir | 0) | 0) + Number(phase.toString()))) + Number(offset.toString());
      });
  } else {
    return (function (_, _$1) {
        return 0;
      });
  }
}

function attachNewTimer(state, send) {
  var match = state[/* timerId */4][0];
  if (match !== undefined) {
    return /* () */0;
  } else if (state[/* clockSpeed */2] > 0) {
    var timerId = setInterval((function () {
            return Curry._1(send, /* Tick */0);
          }), state[/* clockSpeed */2]);
    Curry._1(send, /* SetRunning */Block.__(0, [true]));
    state[/* timerId */4][0] = Js_primitive.some(timerId);
    return /* () */0;
  } else {
    state[/* timerId */4][0] = undefined;
    return /* () */0;
  }
}

function removeTimer(state, send) {
  var match = state[/* timerId */4][0];
  if (match !== undefined) {
    clearInterval(Js_primitive.valFromOption(match));
    Curry._1(send, /* SetRunning */Block.__(0, [false]));
    state[/* timerId */4][0] = undefined;
    return /* () */0;
  } else {
    return /* () */0;
  }
}

var default_001 = /* pixelSize : record */[
  /* x */3,
  /* y */60
];

var default_004 = /* timerId : record */[/* contents */undefined];

var default_005 = /* funs : record */[
  /* red : [] */0,
  /* green : [] */0,
  /* blue : [] */0
];

var $$default = /* record */[
  /* pixelCount */300,
  default_001,
  /* clockSpeed */50,
  /* time */0,
  default_004,
  default_005,
  /* running */false
];

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          id: "root"
                        }, React.createElement("div", {
                              className: "row"
                            }, React.createElement("div", {
                                  className: "col"
                                }, React.createElement("h3", undefined, "Strip Controls"), ReasonReact.element(undefined, undefined, Slider.make(1, 50, 1, /* x */3, "X", (function (v) {
                                            return Curry._1(self[/* send */3], /* UpdateSize */Block.__(2, [
                                                          v | 0,
                                                          self[/* state */1][/* pixelSize */1][/* y */1]
                                                        ]));
                                          }), /* array */[])), ReasonReact.element(undefined, undefined, Slider.make(1, 500, 1, /* y */60, "Y", (function (v) {
                                            return Curry._1(self[/* send */3], /* UpdateSize */Block.__(2, [
                                                          self[/* state */1][/* pixelSize */1][/* x */0],
                                                          v | 0
                                                        ]));
                                          }), /* array */[])), ReasonReact.element(undefined, undefined, Slider.make(1, 500, 1, 300, "Count", (function (v) {
                                            return Curry._1(self[/* send */3], /* UpdateCount */Block.__(1, [v | 0]));
                                          }), /* array */[])), ReasonReact.element(undefined, undefined, Slider.make(1, 200, 1, 50, "Speed", (function (v) {
                                            return Curry._1(self[/* send */3], /* UpdateClockSpeed */Block.__(3, [v | 0]));
                                          }), /* array */[])), "Time: " + String(self[/* state */1][/* time */3]), React.createElement("div", undefined, React.createElement("button", {
                                          onMouseDown: (function () {
                                              return attachNewTimer(self[/* state */1], self[/* send */3]);
                                            }),
                                          onMouseUp: (function () {
                                              return removeTimer(self[/* state */1], self[/* send */3]);
                                            })
                                        }, "Tick!"), ReasonReact.element(undefined, undefined, ToggleButton.make(/* tuple */[
                                              "Start",
                                              "Stop"
                                            ], self[/* state */1][/* running */6], (function (b) {
                                                if (b) {
                                                  return attachNewTimer(self[/* state */1], self[/* send */3]);
                                                } else {
                                                  return removeTimer(self[/* state */1], self[/* send */3]);
                                                }
                                              }), /* array */[])), React.createElement("button", {
                                          onClick: (function () {
                                              return Curry._1(self[/* send */3], /* ResetTime */1);
                                            })
                                        }, "Reset")))), ReasonReact.element(undefined, undefined, LedStrip.make(self[/* state */1][/* pixelCount */0], self[/* state */1][/* pixelSize */1], self[/* state */1][/* time */3], /* record */[
                                  /* red */List.map(unwrap_colorFunction, self[/* state */1][/* funs */5][/* red */0]),
                                  /* green */List.map(unwrap_colorFunction, self[/* state */1][/* funs */5][/* green */1]),
                                  /* blue */List.map(unwrap_colorFunction, self[/* state */1][/* funs */5][/* blue */2])
                                ], /* array */[])), React.createElement("div", {
                              className: "col"
                            }, React.createElement("button", {
                                  onClick: (function () {
                                      return Curry._1(self[/* send */3], /* NewRed */2);
                                    })
                                }, "New Red"), React.createElement("button", {
                                  onClick: (function () {
                                      return Curry._1(self[/* send */3], /* DeleteRed */3);
                                    })
                                }, "Delete Red"), $$Array.of_list(List.mapi((function (i, param) {
                                        var colF = param[0];
                                        return React.createElement("div", undefined, String(i), ReasonReact.element(String(i), undefined, Cosine.make(colF[0], colF[1], colF[2], colF[3], colF[4], param[1], (function (a, p, ph, off, td, vis) {
                                                              return Curry._1(self[/* send */3], /* UpdateRed */Block.__(4, [
                                                                            i,
                                                                            /* Cos */[
                                                                              a,
                                                                              p,
                                                                              ph,
                                                                              off,
                                                                              td
                                                                            ],
                                                                            vis
                                                                          ]));
                                                            }), /* array */[])));
                                      }), self[/* state */1][/* funs */5][/* red */0]))), React.createElement("div", {
                              className: "col"
                            }, React.createElement("button", {
                                  onClick: (function () {
                                      return Curry._1(self[/* send */3], /* NewGreen */4);
                                    })
                                }, "New Green"), React.createElement("button", {
                                  onClick: (function () {
                                      return Curry._1(self[/* send */3], /* DeleteGreen */5);
                                    })
                                }, "Delete Green"), $$Array.of_list(List.mapi((function (i, param) {
                                        var colF = param[0];
                                        return React.createElement("div", undefined, String(i), ReasonReact.element(String(i), undefined, Cosine.make(colF[0], colF[1], colF[2], colF[3], colF[4], param[1], (function (a, p, ph, off, td, vis) {
                                                              return Curry._1(self[/* send */3], /* UpdateGreen */Block.__(5, [
                                                                            i,
                                                                            /* Cos */[
                                                                              a,
                                                                              p,
                                                                              ph,
                                                                              off,
                                                                              td
                                                                            ],
                                                                            vis
                                                                          ]));
                                                            }), /* array */[])));
                                      }), self[/* state */1][/* funs */5][/* green */1]))), React.createElement("div", {
                              className: "col"
                            }, React.createElement("button", {
                                  onClick: (function () {
                                      return Curry._1(self[/* send */3], /* NewBlue */6);
                                    })
                                }, "New Blue"), React.createElement("button", {
                                  onClick: (function () {
                                      return Curry._1(self[/* send */3], /* DeleteBlue */7);
                                    })
                                }, "Delete Blue"), $$Array.of_list(List.mapi((function (i, param) {
                                        var colF = param[0];
                                        return React.createElement("div", undefined, String(i), ReasonReact.element(String(i), undefined, Cosine.make(colF[0], colF[1], colF[2], colF[3], colF[4], param[1], (function (a, p, ph, off, td, vis) {
                                                              return Curry._1(self[/* send */3], /* UpdateBlue */Block.__(6, [
                                                                            i,
                                                                            /* Cos */[
                                                                              a,
                                                                              p,
                                                                              ph,
                                                                              off,
                                                                              td
                                                                            ],
                                                                            vis
                                                                          ]));
                                                            }), /* array */[])));
                                      }), self[/* state */1][/* funs */5][/* blue */2]))));
            }),
          /* initialState */(function () {
              return $$default;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3] + 1 | 0,
                                  /* timerId */state[/* timerId */4],
                                  /* funs */state[/* funs */5],
                                  /* running */state[/* running */6]
                                ]]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */0,
                                  /* timerId */state[/* timerId */4],
                                  /* funs */state[/* funs */5],
                                  /* running */state[/* running */6]
                                ]]);
                  case 2 : 
                      var init = state[/* funs */5];
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs : record */[
                                    /* red */List.append(state[/* funs */5][/* red */0], /* :: */[
                                          /* tuple */[
                                            /* Cos */[
                                              0.5,
                                              0.1,
                                              0,
                                              0.5,
                                              3
                                            ],
                                            true
                                          ],
                                          /* [] */0
                                        ]),
                                    /* green */init[/* green */1],
                                    /* blue */init[/* blue */2]
                                  ],
                                  /* running */state[/* running */6]
                                ]]);
                  case 3 : 
                      var init$1 = state[/* funs */5];
                      var match = List.rev(state[/* funs */5][/* red */0]);
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs : record */[
                                    /* red */match ? List.rev(match[1]) : /* [] */0,
                                    /* green */init$1[/* green */1],
                                    /* blue */init$1[/* blue */2]
                                  ],
                                  /* running */state[/* running */6]
                                ]]);
                  case 4 : 
                      var init$2 = state[/* funs */5];
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs : record */[
                                    /* red */init$2[/* red */0],
                                    /* green */List.append(state[/* funs */5][/* green */1], /* :: */[
                                          /* tuple */[
                                            /* Cos */[
                                              0.5,
                                              0.1,
                                              0,
                                              0.5,
                                              3
                                            ],
                                            true
                                          ],
                                          /* [] */0
                                        ]),
                                    /* blue */init$2[/* blue */2]
                                  ],
                                  /* running */state[/* running */6]
                                ]]);
                  case 5 : 
                      var init$3 = state[/* funs */5];
                      var match$1 = List.rev(state[/* funs */5][/* green */1]);
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs : record */[
                                    /* red */init$3[/* red */0],
                                    /* green */match$1 ? List.rev(match$1[1]) : /* [] */0,
                                    /* blue */init$3[/* blue */2]
                                  ],
                                  /* running */state[/* running */6]
                                ]]);
                  case 6 : 
                      var init$4 = state[/* funs */5];
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs : record */[
                                    /* red */init$4[/* red */0],
                                    /* green */init$4[/* green */1],
                                    /* blue */List.append(state[/* funs */5][/* blue */2], /* :: */[
                                          /* tuple */[
                                            /* Cos */[
                                              0.5,
                                              0.1,
                                              0,
                                              0.5,
                                              3
                                            ],
                                            true
                                          ],
                                          /* [] */0
                                        ])
                                  ],
                                  /* running */state[/* running */6]
                                ]]);
                  case 7 : 
                      var init$5 = state[/* funs */5];
                      var match$2 = List.rev(state[/* funs */5][/* blue */2]);
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs : record */[
                                    /* red */init$5[/* red */0],
                                    /* green */init$5[/* green */1],
                                    /* blue */match$2 ? List.rev(match$2[1]) : /* [] */0
                                  ],
                                  /* running */state[/* running */6]
                                ]]);
                  
                }
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs */state[/* funs */5],
                                  /* running */action[0]
                                ]]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */action[0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs */state[/* funs */5],
                                  /* running */state[/* running */6]
                                ]]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize : record */[
                                    /* x */action[0],
                                    /* y */action[1]
                                  ],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs */state[/* funs */5],
                                  /* running */state[/* running */6]
                                ]]);
                  case 3 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */action[0],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs */state[/* funs */5],
                                  /* running */state[/* running */6]
                                ]]);
                  case 4 : 
                      var vis = action[2];
                      var colF = action[1];
                      var n = action[0];
                      var init$6 = state[/* funs */5];
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs : record */[
                                    /* red */List.mapi((function (i, x) {
                                            if (i === n) {
                                              return /* tuple */[
                                                      colF,
                                                      vis
                                                    ];
                                            } else {
                                              return x;
                                            }
                                          }), state[/* funs */5][/* red */0]),
                                    /* green */init$6[/* green */1],
                                    /* blue */init$6[/* blue */2]
                                  ],
                                  /* running */state[/* running */6]
                                ]]);
                  case 5 : 
                      var vis$1 = action[2];
                      var colF$1 = action[1];
                      var n$1 = action[0];
                      var init$7 = state[/* funs */5];
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs : record */[
                                    /* red */init$7[/* red */0],
                                    /* green */List.mapi((function (i, x) {
                                            if (i === n$1) {
                                              return /* tuple */[
                                                      colF$1,
                                                      vis$1
                                                    ];
                                            } else {
                                              return x;
                                            }
                                          }), state[/* funs */5][/* green */1]),
                                    /* blue */init$7[/* blue */2]
                                  ],
                                  /* running */state[/* running */6]
                                ]]);
                  case 6 : 
                      var vis$2 = action[2];
                      var colF$2 = action[1];
                      var n$2 = action[0];
                      var init$8 = state[/* funs */5];
                      return /* Update */Block.__(0, [/* record */[
                                  /* pixelCount */state[/* pixelCount */0],
                                  /* pixelSize */state[/* pixelSize */1],
                                  /* clockSpeed */state[/* clockSpeed */2],
                                  /* time */state[/* time */3],
                                  /* timerId */state[/* timerId */4],
                                  /* funs : record */[
                                    /* red */init$8[/* red */0],
                                    /* green */init$8[/* green */1],
                                    /* blue */List.mapi((function (i, x) {
                                            if (i === n$2) {
                                              return /* tuple */[
                                                      colF$2,
                                                      vis$2
                                                    ];
                                            } else {
                                              return x;
                                            }
                                          }), state[/* funs */5][/* blue */2])
                                  ],
                                  /* running */state[/* running */6]
                                ]]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.floatify = floatify;
exports.pi = pi;
exports.unwrap_colorFunction = unwrap_colorFunction;
exports.attachNewTimer = attachNewTimer;
exports.removeTimer = removeTimer;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.make = make;
/* component Not a pure module */
