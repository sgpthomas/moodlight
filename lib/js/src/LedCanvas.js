// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pixel = require("./Pixel.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var component = ReasonReact.reducerComponent("LedCanvas");

var idRef = /* record */[/* contents */-1];

function nextPixel(size) {
  idRef[0] = idRef[0] + 1 | 0;
  return /* record */[
          /* id */idRef[0],
          /* size */size,
          /* color : record */[
            /* r */0,
            /* g */0,
            /* b */0
          ]
        ];
}

function makePixels(num, size) {
  if (num !== 0) {
    if (num < 0) {
      return Pervasives.failwith("Need a positive size");
    } else {
      return /* :: */[
              nextPixel(size),
              makePixels(num - 1 | 0, size)
            ];
    }
  } else {
    return /* [] */0;
  }
}

function attachNewTimer(state, send, clockSpeed) {
  if (clockSpeed > 0) {
    var timerId = setInterval((function () {
            return Curry._1(send, /* Tick */1);
          }), clockSpeed);
    state[/* timerId */0][0] = Js_primitive.some(timerId);
    return /* () */0;
  } else {
    state[/* timerId */0][0] = undefined;
    return /* () */0;
  }
}

function make(num, size, clockSpeed, red, green, blue, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */(function (self) {
              var init = self[/* state */1];
              return /* record */[
                      /* timerId */init[/* timerId */0],
                      /* pixels */makePixels(num, size),
                      /* time */init[/* time */2]
                    ];
            }),
          /* didMount */(function (self) {
              return attachNewTimer(self[/* state */1], self[/* send */3], clockSpeed);
            }),
          /* didUpdate */(function (param) {
              var newSelf = param[/* newSelf */1];
              var match = param[/* oldSelf */0][/* state */1][/* timerId */0][0];
              if (match !== undefined) {
                clearInterval(Js_primitive.valFromOption(match));
              }
              return attachNewTimer(newSelf[/* state */1], newSelf[/* send */3], clockSpeed);
            }),
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          id: "ledstrip"
                        }, $$Array.of_list(List.map((function (pixel) {
                                    return ReasonReact.element(String(pixel[/* id */0]), undefined, Pixel.make(pixel[/* size */1], pixel[/* color */2], /* array */[]));
                                  }), List.mapi((function (i, pix) {
                                        return /* record */[
                                                /* id */pix[/* id */0],
                                                /* size */pix[/* size */1],
                                                /* color : record */[
                                                  /* r */Curry._2(red, i, self[/* state */1][/* time */2]),
                                                  /* g */Curry._2(green, i, self[/* state */1][/* time */2]),
                                                  /* b */Curry._2(blue, i, self[/* state */1][/* time */2])
                                                ]
                                              ];
                                      }), self[/* state */1][/* pixels */1]))));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* timerId : record */[/* contents */undefined],
                      /* pixels */makePixels(num, size),
                      /* time */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action) {
                return /* Update */Block.__(0, [/* record */[
                            /* timerId */state[/* timerId */0],
                            /* pixels */state[/* pixels */1],
                            /* time */state[/* time */2] + 1 | 0
                          ]]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* timerId */state[/* timerId */0],
                            /* pixels */makePixels(num, size),
                            /* time */state[/* time */2]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.idRef = idRef;
exports.nextPixel = nextPixel;
exports.makePixels = makePixels;
exports.attachNewTimer = attachNewTimer;
exports.make = make;
/* component Not a pure module */
